// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// risingEdge //
// ---------- //

#define risingEdge_wrap_target 0
#define risingEdge_wrap 5

static const uint16_t risingEdge_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0x20a0, //  1: wait   1 pin, 0                   
    0xc020, //  2: irq    wait 0                     
    0x20a1, //  3: wait   1 pin, 1                   
    0x2021, //  4: wait   0 pin, 1                   
    0xc021, //  5: irq    wait 1                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program risingEdge_program = {
    .instructions = risingEdge_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config risingEdge_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + risingEdge_wrap_target, offset + risingEdge_wrap);
    return c;
}

	static inline void risingEdgeInit(PIO pio, uint sm, uint offset, uint sh_pin, uint pulse_pin){
		pio_sm_config c = risingEdge_program_get_default_config(offset);
		sm_config_set_in_pins(&c, pulse_pin);					//Set base IN pin
		pio_sm_set_consecutive_pindirs(pio, sm, sh_pin, 1, false);		//Set direction of 1 pin to IN
		pio_sm_set_consecutive_pindirs(pio, sm, pulse_pin, 1, false);		//Set direction of 1 pin to IN
		pio_gpio_init(pio, pulse_pin);					//Connect GPIO to PIO block
		pio_gpio_init(pio, sh_pin);					//Connect GPIO to PIO block
		pio_sm_init(pio, sm, offset, &c);				//Load config and jump to start of program
		pio_sm_set_enabled(pio, sm, true);				//Start PIO block
	}

#endif

